(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1553, u"Cannot drop index \'t2__idx\': needed in a foreign key constraint")'
p3
sS'layer'
p4
S'/home/aubreymoore/Devel/playpen/web2py/applications/pestlist/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    # db = DAL(myconf.get(\'db.uri\'),\n    #          pool_size=myconf.get(\'db.pool_size\'),\n    #          migrate_enabled=myconf.get(\'db.migrate\'),\n    #          check_reserved=[\'all\'])\n\n    db = DAL(\'mysql://aubreymoore:Canada_12@localhost/pestlist\')\n\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\n#auth = Auth(db, host_names=myconf.get(\'host.names\'))\nauth = Auth(db)\n\nservice = Service()\nplugins = PluginManager()\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.define_tables(username=False, signature=False)\n\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n\ndb.define_table(\'extracted_names\',\n    Field(\'extracted_names_json\', \'json\'),\n)\n\ndb.define_table(\'taxon\',\n                Field(\'tid\', unique=True),\n                Field(\'name\'),\n                Field(\'trank\'),\n                Field(\'parent_tid\', \'reference taxon.tid\'))\n\ndb.define_table(\'taxon2\',\n                Field(\'tid\', unique=True),\n                Field(\'parent_tid\'),\n                Field(\'name\'),\n                Field(\'trank\'),\n                Field(\'lineage\'),\n                format=\'%(name)s\'\n               )\n\ndb.define_table(\'associate\',\n                Field(\'taxon1\', db.taxon2),\n                Field(\'taxon2\', db.taxon2),\n                Field(\'type\', default=\'plant host|herbivore\')\n                )\n\ndb.define_table(\'resolved_names\',\n    Field(\'supplied_name_string\'),\n    Field(\'classification_path\', unique=True),\n    Field(\'classification_path_ids\', unique=True),\n    Field(\'classification_path_ranks\'),\n)\n\ndb.define_table(\'uno\',\n    Field(\'data_sources_number\'),\n    Field(\'in_curated_sources\'),\n    Field(\'is_known_name\'),\n    Field(\'supplied_name_string\'),\n    Field(\'canonical_form\'),\n    Field(\'classification_path\'),\n    Field(\'classification_path_ids\'),\n    Field(\'classification_path_ranks\'),\n    Field(\'current_name_string\'),\n    Field(\'current_taxon_id\'),\n    Field(\'data_source_id\'),\n    Field(\'data_source_title\'),\n    Field(\'edit_distance\'),\n    Field(\'gni_uuid\'),\n    Field(\'imported_at\'),\n    Field(\'match_type\'),\n    Field(\'match_value\'),\n    Field(\'name_string\'),\n    Field(\'prescore\'),\n    Field(\'score\'),\n    Field(\'taxon_id\'),\n    auth.signature\n)\n\ndb.define_table(\'duo\',\n    Field(\'data_sources_number\'),\n    Field(\'in_curated_sources\'),\n    Field(\'is_known_name\'),\n    Field(\'supplied_name_string\'),\n    Field(\'canonical_form\'),\n    Field(\'classification_path\'),\n    Field(\'classification_path_ids\'),\n    Field(\'classification_path_ranks\'),\n    Field(\'current_name_string\'),\n    Field(\'current_taxon_id\'),\n    Field(\'data_source_id\'),\n    Field(\'data_source_title\'),\n    Field(\'edit_distance\'),\n    Field(\'gni_uuid\'),\n    Field(\'imported_at\'),\n    Field(\'match_type\'),\n    Field(\'match_value\'),\n    Field(\'name_string\'),\n    Field(\'prescore\'),\n    Field(\'score\'),\n    Field(\'taxon_id\'),\n    auth.signature\n)\n\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\nauth.enable_record_versioning(db)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/aubreymoore/Devel/playpen/web2py/applications/pestlist/models/db.py", line 157, in <module>\n    Field(\'type\', default=\'plant host|herbivore\')\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/packages/dal/pydal/base.py", line 873, in lazy_define_table\n    polymodel=polymodel)\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/packages/dal/pydal/adapters/base.py", line 510, in create_table\n    fake_migrate=fake_migrate\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/packages/dal/pydal/adapters/base.py", line 623, in migrate_table\n    self.execute(sub_query)\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/aubreymoore/Devel/playpen/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1553, u"Cannot drop index \'t2__idx\': needed in a foreign key constraint")\n'
p11
s.